// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: meta.proto

#ifndef PROTOBUF_meta_2eproto__INCLUDED
#define PROTOBUF_meta_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_meta_2eproto();
void protobuf_AssignDesc_meta_2eproto();
void protobuf_ShutdownFile_meta_2eproto();

class Package;

// ===================================================================

class Package : public ::google::protobuf::Message {
 public:
  Package();
  virtual ~Package();
  
  Package(const Package& from);
  
  inline Package& operator=(const Package& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Package& default_instance();
  
  void Swap(Package* other);
  
  // implements Message ----------------------------------------------
  
  Package* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Package& from);
  void MergeFrom(const Package& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string virtualPath = 1;
  inline bool has_virtualpath() const;
  inline void clear_virtualpath();
  static const int kVirtualPathFieldNumber = 1;
  inline const ::std::string& virtualpath() const;
  inline void set_virtualpath(const ::std::string& value);
  inline void set_virtualpath(const char* value);
  inline void set_virtualpath(const char* value, size_t size);
  inline ::std::string* mutable_virtualpath();
  inline ::std::string* release_virtualpath();
  
  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);
  
  // optional string realFullPath = 3;
  inline bool has_realfullpath() const;
  inline void clear_realfullpath();
  static const int kRealFullPathFieldNumber = 3;
  inline const ::std::string& realfullpath() const;
  inline void set_realfullpath(const ::std::string& value);
  inline void set_realfullpath(const char* value);
  inline void set_realfullpath(const char* value, size_t size);
  inline ::std::string* mutable_realfullpath();
  inline ::std::string* release_realfullpath();
  
  // optional bool isDir = 4;
  inline bool has_isdir() const;
  inline void clear_isdir();
  static const int kIsDirFieldNumber = 4;
  inline bool isdir() const;
  inline void set_isdir(bool value);
  
  // repeated string listItem = 5;
  inline int listitem_size() const;
  inline void clear_listitem();
  static const int kListItemFieldNumber = 5;
  inline const ::std::string& listitem(int index) const;
  inline ::std::string* mutable_listitem(int index);
  inline void set_listitem(int index, const ::std::string& value);
  inline void set_listitem(int index, const char* value);
  inline void set_listitem(int index, const char* value, size_t size);
  inline ::std::string* add_listitem();
  inline void add_listitem(const ::std::string& value);
  inline void add_listitem(const char* value);
  inline void add_listitem(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& listitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_listitem();
  
  // optional int32 openMode = 6;
  inline bool has_openmode() const;
  inline void clear_openmode();
  static const int kOpenModeFieldNumber = 6;
  inline ::google::protobuf::int32 openmode() const;
  inline void set_openmode(::google::protobuf::int32 value);
  
  // optional int32 mode = 7;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 7;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);
  
  // optional int32 Operation = 8;
  inline bool has_operation() const;
  inline void clear_operation();
  static const int kOperationFieldNumber = 8;
  inline ::google::protobuf::int32 operation() const;
  inline void set_operation(::google::protobuf::int32 value);
  
  // optional int32 replicaNo = 9;
  inline bool has_replicano() const;
  inline void clear_replicano();
  static const int kReplicaNoFieldNumber = 9;
  inline ::google::protobuf::int32 replicano() const;
  inline void set_replicano(::google::protobuf::int32 value);
  
  // optional string opcode = 10;
  inline bool has_opcode() const;
  inline void clear_opcode();
  static const int kOpcodeFieldNumber = 10;
  inline const ::std::string& opcode() const;
  inline void set_opcode(const ::std::string& value);
  inline void set_opcode(const char* value);
  inline void set_opcode(const char* value, size_t size);
  inline ::std::string* mutable_opcode();
  inline ::std::string* release_opcode();
  
  // optional string rcode = 11;
  inline bool has_rcode() const;
  inline void clear_rcode();
  static const int kRcodeFieldNumber = 11;
  inline const ::std::string& rcode() const;
  inline void set_rcode(const ::std::string& value);
  inline void set_rcode(const char* value);
  inline void set_rcode(const char* value, size_t size);
  inline ::std::string* mutable_rcode();
  inline ::std::string* release_rcode();
  
  // optional uint32 migrateInst = 12;
  inline bool has_migrateinst() const;
  inline void clear_migrateinst();
  static const int kMigrateInstFieldNumber = 12;
  inline ::google::protobuf::uint32 migrateinst() const;
  inline void set_migrateinst(::google::protobuf::uint32 value);
  
  // optional bool uprange = 13;
  inline bool has_uprange() const;
  inline void clear_uprange();
  static const int kUprangeFieldNumber = 13;
  inline bool uprange() const;
  inline void set_uprange(bool value);
  
  // optional string sourceZHT = 14;
  inline bool has_sourcezht() const;
  inline void clear_sourcezht();
  static const int kSourceZHTFieldNumber = 14;
  inline const ::std::string& sourcezht() const;
  inline void set_sourcezht(const ::std::string& value);
  inline void set_sourcezht(const char* value);
  inline void set_sourcezht(const char* value, size_t size);
  inline ::std::string* mutable_sourcezht();
  inline ::std::string* release_sourcezht();
  
  // optional string targetZHT = 15;
  inline bool has_targetzht() const;
  inline void clear_targetzht();
  static const int kTargetZHTFieldNumber = 15;
  inline const ::std::string& targetzht() const;
  inline void set_targetzht(const ::std::string& value);
  inline void set_targetzht(const char* value);
  inline void set_targetzht(const char* value, size_t size);
  inline ::std::string* mutable_targetzht();
  inline ::std::string* release_targetzht();
  
  // optional string rfname = 16;
  inline bool has_rfname() const;
  inline void clear_rfname();
  static const int kRfnameFieldNumber = 16;
  inline const ::std::string& rfname() const;
  inline void set_rfname(const ::std::string& value);
  inline void set_rfname(const char* value);
  inline void set_rfname(const char* value, size_t size);
  inline ::std::string* mutable_rfname();
  inline ::std::string* release_rfname();
  
  // optional string lfname = 17;
  inline bool has_lfname() const;
  inline void clear_lfname();
  static const int kLfnameFieldNumber = 17;
  inline const ::std::string& lfname() const;
  inline void set_lfname(const ::std::string& value);
  inline void set_lfname(const char* value);
  inline void set_lfname(const char* value, size_t size);
  inline ::std::string* mutable_lfname();
  inline ::std::string* release_lfname();
  
  // repeated uint64 migringpos = 18;
  inline int migringpos_size() const;
  inline void clear_migringpos();
  static const int kMigringposFieldNumber = 18;
  inline ::google::protobuf::uint64 migringpos(int index) const;
  inline void set_migringpos(int index, ::google::protobuf::uint64 value);
  inline void add_migringpos(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      migringpos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_migringpos();
  
  // optional string gmembership = 19;
  inline bool has_gmembership() const;
  inline void clear_gmembership();
  static const int kGmembershipFieldNumber = 19;
  inline const ::std::string& gmembership() const;
  inline void set_gmembership(const ::std::string& value);
  inline void set_gmembership(const char* value);
  inline void set_gmembership(const char* value, size_t size);
  inline ::std::string* mutable_gmembership();
  inline ::std::string* release_gmembership();
  
  // optional bool isfwdmsg = 20;
  inline bool has_isfwdmsg() const;
  inline void clear_isfwdmsg();
  static const int kIsfwdmsgFieldNumber = 20;
  inline bool isfwdmsg() const;
  inline void set_isfwdmsg(bool value);
  
  // optional string asneighbor = 21;
  inline bool has_asneighbor() const;
  inline void clear_asneighbor();
  static const int kAsneighborFieldNumber = 21;
  inline const ::std::string& asneighbor() const;
  inline void set_asneighbor(const ::std::string& value);
  inline void set_asneighbor(const char* value);
  inline void set_asneighbor(const char* value, size_t size);
  inline ::std::string* mutable_asneighbor();
  inline ::std::string* release_asneighbor();
  
  // optional string wifecode = 22;
  inline bool has_wifecode() const;
  inline void clear_wifecode();
  static const int kWifecodeFieldNumber = 22;
  inline const ::std::string& wifecode() const;
  inline void set_wifecode(const ::std::string& value);
  inline void set_wifecode(const char* value);
  inline void set_wifecode(const char* value, size_t size);
  inline ::std::string* mutable_wifecode();
  inline ::std::string* release_wifecode();
  
  // optional uint64 ackid = 23;
  inline bool has_ackid() const;
  inline void clear_ackid();
  static const int kAckidFieldNumber = 23;
  inline ::google::protobuf::uint64 ackid() const;
  inline void set_ackid(::google::protobuf::uint64 value);
  
  // repeated uint32 tid = 24;
  inline int tid_size() const;
  inline void clear_tid();
  static const int kTidFieldNumber = 24;
  inline ::google::protobuf::uint32 tid(int index) const;
  inline void set_tid(int index, ::google::protobuf::uint32 value);
  inline void add_tid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      tid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_tid();
  
  // repeated string cid = 25;
  inline int cid_size() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 25;
  inline const ::std::string& cid(int index) const;
  inline ::std::string* mutable_cid(int index);
  inline void set_cid(int index, const ::std::string& value);
  inline void set_cid(int index, const char* value);
  inline void set_cid(int index, const char* value, size_t size);
  inline ::std::string* add_cid();
  inline void add_cid(const ::std::string& value);
  inline void add_cid(const char* value);
  inline void add_cid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cid();
  
  // repeated string desc = 26;
  inline int desc_size() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 26;
  inline const ::std::string& desc(int index) const;
  inline ::std::string* mutable_desc(int index);
  inline void set_desc(int index, const ::std::string& value);
  inline void set_desc(int index, const char* value);
  inline void set_desc(int index, const char* value, size_t size);
  inline ::std::string* add_desc();
  inline void add_desc(const ::std::string& value);
  inline void add_desc(const char* value);
  inline void add_desc(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& desc() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desc();
  
  // repeated uint32 nmoves = 27;
  inline int nmoves_size() const;
  inline void clear_nmoves();
  static const int kNmovesFieldNumber = 27;
  inline ::google::protobuf::uint32 nmoves(int index) const;
  inline void set_nmoves(int index, ::google::protobuf::uint32 value);
  inline void add_nmoves(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      nmoves() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_nmoves();
  
  // @@protoc_insertion_point(class_scope:Package)
 private:
  inline void set_has_virtualpath();
  inline void clear_has_virtualpath();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_realfullpath();
  inline void clear_has_realfullpath();
  inline void set_has_isdir();
  inline void clear_has_isdir();
  inline void set_has_openmode();
  inline void clear_has_openmode();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_operation();
  inline void clear_has_operation();
  inline void set_has_replicano();
  inline void clear_has_replicano();
  inline void set_has_opcode();
  inline void clear_has_opcode();
  inline void set_has_rcode();
  inline void clear_has_rcode();
  inline void set_has_migrateinst();
  inline void clear_has_migrateinst();
  inline void set_has_uprange();
  inline void clear_has_uprange();
  inline void set_has_sourcezht();
  inline void clear_has_sourcezht();
  inline void set_has_targetzht();
  inline void clear_has_targetzht();
  inline void set_has_rfname();
  inline void clear_has_rfname();
  inline void set_has_lfname();
  inline void clear_has_lfname();
  inline void set_has_gmembership();
  inline void clear_has_gmembership();
  inline void set_has_isfwdmsg();
  inline void clear_has_isfwdmsg();
  inline void set_has_asneighbor();
  inline void clear_has_asneighbor();
  inline void set_has_wifecode();
  inline void clear_has_wifecode();
  inline void set_has_ackid();
  inline void clear_has_ackid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* virtualpath_;
  ::std::string* realfullpath_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 openmode_;
  ::google::protobuf::RepeatedPtrField< ::std::string> listitem_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 operation_;
  ::std::string* opcode_;
  ::google::protobuf::int32 replicano_;
  ::google::protobuf::uint32 migrateinst_;
  ::std::string* rcode_;
  ::std::string* sourcezht_;
  ::std::string* targetzht_;
  ::std::string* rfname_;
  ::std::string* lfname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > migringpos_;
  ::std::string* gmembership_;
  ::std::string* asneighbor_;
  ::std::string* wifecode_;
  ::google::protobuf::uint64 ackid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > tid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desc_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > nmoves_;
  bool isdir_;
  bool uprange_;
  bool isfwdmsg_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  friend void  protobuf_AddDesc_meta_2eproto();
  friend void protobuf_AssignDesc_meta_2eproto();
  friend void protobuf_ShutdownFile_meta_2eproto();
  
  void InitAsDefaultInstance();
  static Package* default_instance_;
};
// ===================================================================


// ===================================================================

// Package

// optional string virtualPath = 1;
inline bool Package::has_virtualpath() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Package::set_has_virtualpath() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Package::clear_has_virtualpath() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Package::clear_virtualpath() {
  if (virtualpath_ != &::google::protobuf::internal::kEmptyString) {
    virtualpath_->clear();
  }
  clear_has_virtualpath();
}
inline const ::std::string& Package::virtualpath() const {
  return *virtualpath_;
}
inline void Package::set_virtualpath(const ::std::string& value) {
  set_has_virtualpath();
  if (virtualpath_ == &::google::protobuf::internal::kEmptyString) {
    virtualpath_ = new ::std::string;
  }
  virtualpath_->assign(value);
}
inline void Package::set_virtualpath(const char* value) {
  set_has_virtualpath();
  if (virtualpath_ == &::google::protobuf::internal::kEmptyString) {
    virtualpath_ = new ::std::string;
  }
  virtualpath_->assign(value);
}
inline void Package::set_virtualpath(const char* value, size_t size) {
  set_has_virtualpath();
  if (virtualpath_ == &::google::protobuf::internal::kEmptyString) {
    virtualpath_ = new ::std::string;
  }
  virtualpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_virtualpath() {
  set_has_virtualpath();
  if (virtualpath_ == &::google::protobuf::internal::kEmptyString) {
    virtualpath_ = new ::std::string;
  }
  return virtualpath_;
}
inline ::std::string* Package::release_virtualpath() {
  clear_has_virtualpath();
  if (virtualpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = virtualpath_;
    virtualpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 num = 2;
inline bool Package::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Package::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Package::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Package::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Package::num() const {
  return num_;
}
inline void Package::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional string realFullPath = 3;
inline bool Package::has_realfullpath() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Package::set_has_realfullpath() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Package::clear_has_realfullpath() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Package::clear_realfullpath() {
  if (realfullpath_ != &::google::protobuf::internal::kEmptyString) {
    realfullpath_->clear();
  }
  clear_has_realfullpath();
}
inline const ::std::string& Package::realfullpath() const {
  return *realfullpath_;
}
inline void Package::set_realfullpath(const ::std::string& value) {
  set_has_realfullpath();
  if (realfullpath_ == &::google::protobuf::internal::kEmptyString) {
    realfullpath_ = new ::std::string;
  }
  realfullpath_->assign(value);
}
inline void Package::set_realfullpath(const char* value) {
  set_has_realfullpath();
  if (realfullpath_ == &::google::protobuf::internal::kEmptyString) {
    realfullpath_ = new ::std::string;
  }
  realfullpath_->assign(value);
}
inline void Package::set_realfullpath(const char* value, size_t size) {
  set_has_realfullpath();
  if (realfullpath_ == &::google::protobuf::internal::kEmptyString) {
    realfullpath_ = new ::std::string;
  }
  realfullpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_realfullpath() {
  set_has_realfullpath();
  if (realfullpath_ == &::google::protobuf::internal::kEmptyString) {
    realfullpath_ = new ::std::string;
  }
  return realfullpath_;
}
inline ::std::string* Package::release_realfullpath() {
  clear_has_realfullpath();
  if (realfullpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = realfullpath_;
    realfullpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isDir = 4;
inline bool Package::has_isdir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Package::set_has_isdir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Package::clear_has_isdir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Package::clear_isdir() {
  isdir_ = false;
  clear_has_isdir();
}
inline bool Package::isdir() const {
  return isdir_;
}
inline void Package::set_isdir(bool value) {
  set_has_isdir();
  isdir_ = value;
}

// repeated string listItem = 5;
inline int Package::listitem_size() const {
  return listitem_.size();
}
inline void Package::clear_listitem() {
  listitem_.Clear();
}
inline const ::std::string& Package::listitem(int index) const {
  return listitem_.Get(index);
}
inline ::std::string* Package::mutable_listitem(int index) {
  return listitem_.Mutable(index);
}
inline void Package::set_listitem(int index, const ::std::string& value) {
  listitem_.Mutable(index)->assign(value);
}
inline void Package::set_listitem(int index, const char* value) {
  listitem_.Mutable(index)->assign(value);
}
inline void Package::set_listitem(int index, const char* value, size_t size) {
  listitem_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::add_listitem() {
  return listitem_.Add();
}
inline void Package::add_listitem(const ::std::string& value) {
  listitem_.Add()->assign(value);
}
inline void Package::add_listitem(const char* value) {
  listitem_.Add()->assign(value);
}
inline void Package::add_listitem(const char* value, size_t size) {
  listitem_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Package::listitem() const {
  return listitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Package::mutable_listitem() {
  return &listitem_;
}

// optional int32 openMode = 6;
inline bool Package::has_openmode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Package::set_has_openmode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Package::clear_has_openmode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Package::clear_openmode() {
  openmode_ = 0;
  clear_has_openmode();
}
inline ::google::protobuf::int32 Package::openmode() const {
  return openmode_;
}
inline void Package::set_openmode(::google::protobuf::int32 value) {
  set_has_openmode();
  openmode_ = value;
}

// optional int32 mode = 7;
inline bool Package::has_mode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Package::set_has_mode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Package::clear_has_mode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Package::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 Package::mode() const {
  return mode_;
}
inline void Package::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 Operation = 8;
inline bool Package::has_operation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Package::set_has_operation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Package::clear_has_operation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Package::clear_operation() {
  operation_ = 0;
  clear_has_operation();
}
inline ::google::protobuf::int32 Package::operation() const {
  return operation_;
}
inline void Package::set_operation(::google::protobuf::int32 value) {
  set_has_operation();
  operation_ = value;
}

// optional int32 replicaNo = 9;
inline bool Package::has_replicano() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Package::set_has_replicano() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Package::clear_has_replicano() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Package::clear_replicano() {
  replicano_ = 0;
  clear_has_replicano();
}
inline ::google::protobuf::int32 Package::replicano() const {
  return replicano_;
}
inline void Package::set_replicano(::google::protobuf::int32 value) {
  set_has_replicano();
  replicano_ = value;
}

// optional string opcode = 10;
inline bool Package::has_opcode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Package::set_has_opcode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Package::clear_has_opcode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Package::clear_opcode() {
  if (opcode_ != &::google::protobuf::internal::kEmptyString) {
    opcode_->clear();
  }
  clear_has_opcode();
}
inline const ::std::string& Package::opcode() const {
  return *opcode_;
}
inline void Package::set_opcode(const ::std::string& value) {
  set_has_opcode();
  if (opcode_ == &::google::protobuf::internal::kEmptyString) {
    opcode_ = new ::std::string;
  }
  opcode_->assign(value);
}
inline void Package::set_opcode(const char* value) {
  set_has_opcode();
  if (opcode_ == &::google::protobuf::internal::kEmptyString) {
    opcode_ = new ::std::string;
  }
  opcode_->assign(value);
}
inline void Package::set_opcode(const char* value, size_t size) {
  set_has_opcode();
  if (opcode_ == &::google::protobuf::internal::kEmptyString) {
    opcode_ = new ::std::string;
  }
  opcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_opcode() {
  set_has_opcode();
  if (opcode_ == &::google::protobuf::internal::kEmptyString) {
    opcode_ = new ::std::string;
  }
  return opcode_;
}
inline ::std::string* Package::release_opcode() {
  clear_has_opcode();
  if (opcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opcode_;
    opcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rcode = 11;
inline bool Package::has_rcode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Package::set_has_rcode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Package::clear_has_rcode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Package::clear_rcode() {
  if (rcode_ != &::google::protobuf::internal::kEmptyString) {
    rcode_->clear();
  }
  clear_has_rcode();
}
inline const ::std::string& Package::rcode() const {
  return *rcode_;
}
inline void Package::set_rcode(const ::std::string& value) {
  set_has_rcode();
  if (rcode_ == &::google::protobuf::internal::kEmptyString) {
    rcode_ = new ::std::string;
  }
  rcode_->assign(value);
}
inline void Package::set_rcode(const char* value) {
  set_has_rcode();
  if (rcode_ == &::google::protobuf::internal::kEmptyString) {
    rcode_ = new ::std::string;
  }
  rcode_->assign(value);
}
inline void Package::set_rcode(const char* value, size_t size) {
  set_has_rcode();
  if (rcode_ == &::google::protobuf::internal::kEmptyString) {
    rcode_ = new ::std::string;
  }
  rcode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_rcode() {
  set_has_rcode();
  if (rcode_ == &::google::protobuf::internal::kEmptyString) {
    rcode_ = new ::std::string;
  }
  return rcode_;
}
inline ::std::string* Package::release_rcode() {
  clear_has_rcode();
  if (rcode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rcode_;
    rcode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 migrateInst = 12;
inline bool Package::has_migrateinst() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Package::set_has_migrateinst() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Package::clear_has_migrateinst() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Package::clear_migrateinst() {
  migrateinst_ = 0u;
  clear_has_migrateinst();
}
inline ::google::protobuf::uint32 Package::migrateinst() const {
  return migrateinst_;
}
inline void Package::set_migrateinst(::google::protobuf::uint32 value) {
  set_has_migrateinst();
  migrateinst_ = value;
}

// optional bool uprange = 13;
inline bool Package::has_uprange() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Package::set_has_uprange() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Package::clear_has_uprange() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Package::clear_uprange() {
  uprange_ = false;
  clear_has_uprange();
}
inline bool Package::uprange() const {
  return uprange_;
}
inline void Package::set_uprange(bool value) {
  set_has_uprange();
  uprange_ = value;
}

// optional string sourceZHT = 14;
inline bool Package::has_sourcezht() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Package::set_has_sourcezht() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Package::clear_has_sourcezht() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Package::clear_sourcezht() {
  if (sourcezht_ != &::google::protobuf::internal::kEmptyString) {
    sourcezht_->clear();
  }
  clear_has_sourcezht();
}
inline const ::std::string& Package::sourcezht() const {
  return *sourcezht_;
}
inline void Package::set_sourcezht(const ::std::string& value) {
  set_has_sourcezht();
  if (sourcezht_ == &::google::protobuf::internal::kEmptyString) {
    sourcezht_ = new ::std::string;
  }
  sourcezht_->assign(value);
}
inline void Package::set_sourcezht(const char* value) {
  set_has_sourcezht();
  if (sourcezht_ == &::google::protobuf::internal::kEmptyString) {
    sourcezht_ = new ::std::string;
  }
  sourcezht_->assign(value);
}
inline void Package::set_sourcezht(const char* value, size_t size) {
  set_has_sourcezht();
  if (sourcezht_ == &::google::protobuf::internal::kEmptyString) {
    sourcezht_ = new ::std::string;
  }
  sourcezht_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_sourcezht() {
  set_has_sourcezht();
  if (sourcezht_ == &::google::protobuf::internal::kEmptyString) {
    sourcezht_ = new ::std::string;
  }
  return sourcezht_;
}
inline ::std::string* Package::release_sourcezht() {
  clear_has_sourcezht();
  if (sourcezht_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourcezht_;
    sourcezht_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string targetZHT = 15;
inline bool Package::has_targetzht() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Package::set_has_targetzht() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Package::clear_has_targetzht() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Package::clear_targetzht() {
  if (targetzht_ != &::google::protobuf::internal::kEmptyString) {
    targetzht_->clear();
  }
  clear_has_targetzht();
}
inline const ::std::string& Package::targetzht() const {
  return *targetzht_;
}
inline void Package::set_targetzht(const ::std::string& value) {
  set_has_targetzht();
  if (targetzht_ == &::google::protobuf::internal::kEmptyString) {
    targetzht_ = new ::std::string;
  }
  targetzht_->assign(value);
}
inline void Package::set_targetzht(const char* value) {
  set_has_targetzht();
  if (targetzht_ == &::google::protobuf::internal::kEmptyString) {
    targetzht_ = new ::std::string;
  }
  targetzht_->assign(value);
}
inline void Package::set_targetzht(const char* value, size_t size) {
  set_has_targetzht();
  if (targetzht_ == &::google::protobuf::internal::kEmptyString) {
    targetzht_ = new ::std::string;
  }
  targetzht_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_targetzht() {
  set_has_targetzht();
  if (targetzht_ == &::google::protobuf::internal::kEmptyString) {
    targetzht_ = new ::std::string;
  }
  return targetzht_;
}
inline ::std::string* Package::release_targetzht() {
  clear_has_targetzht();
  if (targetzht_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetzht_;
    targetzht_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string rfname = 16;
inline bool Package::has_rfname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Package::set_has_rfname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Package::clear_has_rfname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Package::clear_rfname() {
  if (rfname_ != &::google::protobuf::internal::kEmptyString) {
    rfname_->clear();
  }
  clear_has_rfname();
}
inline const ::std::string& Package::rfname() const {
  return *rfname_;
}
inline void Package::set_rfname(const ::std::string& value) {
  set_has_rfname();
  if (rfname_ == &::google::protobuf::internal::kEmptyString) {
    rfname_ = new ::std::string;
  }
  rfname_->assign(value);
}
inline void Package::set_rfname(const char* value) {
  set_has_rfname();
  if (rfname_ == &::google::protobuf::internal::kEmptyString) {
    rfname_ = new ::std::string;
  }
  rfname_->assign(value);
}
inline void Package::set_rfname(const char* value, size_t size) {
  set_has_rfname();
  if (rfname_ == &::google::protobuf::internal::kEmptyString) {
    rfname_ = new ::std::string;
  }
  rfname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_rfname() {
  set_has_rfname();
  if (rfname_ == &::google::protobuf::internal::kEmptyString) {
    rfname_ = new ::std::string;
  }
  return rfname_;
}
inline ::std::string* Package::release_rfname() {
  clear_has_rfname();
  if (rfname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rfname_;
    rfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string lfname = 17;
inline bool Package::has_lfname() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Package::set_has_lfname() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Package::clear_has_lfname() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Package::clear_lfname() {
  if (lfname_ != &::google::protobuf::internal::kEmptyString) {
    lfname_->clear();
  }
  clear_has_lfname();
}
inline const ::std::string& Package::lfname() const {
  return *lfname_;
}
inline void Package::set_lfname(const ::std::string& value) {
  set_has_lfname();
  if (lfname_ == &::google::protobuf::internal::kEmptyString) {
    lfname_ = new ::std::string;
  }
  lfname_->assign(value);
}
inline void Package::set_lfname(const char* value) {
  set_has_lfname();
  if (lfname_ == &::google::protobuf::internal::kEmptyString) {
    lfname_ = new ::std::string;
  }
  lfname_->assign(value);
}
inline void Package::set_lfname(const char* value, size_t size) {
  set_has_lfname();
  if (lfname_ == &::google::protobuf::internal::kEmptyString) {
    lfname_ = new ::std::string;
  }
  lfname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_lfname() {
  set_has_lfname();
  if (lfname_ == &::google::protobuf::internal::kEmptyString) {
    lfname_ = new ::std::string;
  }
  return lfname_;
}
inline ::std::string* Package::release_lfname() {
  clear_has_lfname();
  if (lfname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lfname_;
    lfname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated uint64 migringpos = 18;
inline int Package::migringpos_size() const {
  return migringpos_.size();
}
inline void Package::clear_migringpos() {
  migringpos_.Clear();
}
inline ::google::protobuf::uint64 Package::migringpos(int index) const {
  return migringpos_.Get(index);
}
inline void Package::set_migringpos(int index, ::google::protobuf::uint64 value) {
  migringpos_.Set(index, value);
}
inline void Package::add_migringpos(::google::protobuf::uint64 value) {
  migringpos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Package::migringpos() const {
  return migringpos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Package::mutable_migringpos() {
  return &migringpos_;
}

// optional string gmembership = 19;
inline bool Package::has_gmembership() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Package::set_has_gmembership() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Package::clear_has_gmembership() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Package::clear_gmembership() {
  if (gmembership_ != &::google::protobuf::internal::kEmptyString) {
    gmembership_->clear();
  }
  clear_has_gmembership();
}
inline const ::std::string& Package::gmembership() const {
  return *gmembership_;
}
inline void Package::set_gmembership(const ::std::string& value) {
  set_has_gmembership();
  if (gmembership_ == &::google::protobuf::internal::kEmptyString) {
    gmembership_ = new ::std::string;
  }
  gmembership_->assign(value);
}
inline void Package::set_gmembership(const char* value) {
  set_has_gmembership();
  if (gmembership_ == &::google::protobuf::internal::kEmptyString) {
    gmembership_ = new ::std::string;
  }
  gmembership_->assign(value);
}
inline void Package::set_gmembership(const char* value, size_t size) {
  set_has_gmembership();
  if (gmembership_ == &::google::protobuf::internal::kEmptyString) {
    gmembership_ = new ::std::string;
  }
  gmembership_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_gmembership() {
  set_has_gmembership();
  if (gmembership_ == &::google::protobuf::internal::kEmptyString) {
    gmembership_ = new ::std::string;
  }
  return gmembership_;
}
inline ::std::string* Package::release_gmembership() {
  clear_has_gmembership();
  if (gmembership_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gmembership_;
    gmembership_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isfwdmsg = 20;
inline bool Package::has_isfwdmsg() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Package::set_has_isfwdmsg() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Package::clear_has_isfwdmsg() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Package::clear_isfwdmsg() {
  isfwdmsg_ = false;
  clear_has_isfwdmsg();
}
inline bool Package::isfwdmsg() const {
  return isfwdmsg_;
}
inline void Package::set_isfwdmsg(bool value) {
  set_has_isfwdmsg();
  isfwdmsg_ = value;
}

// optional string asneighbor = 21;
inline bool Package::has_asneighbor() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Package::set_has_asneighbor() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Package::clear_has_asneighbor() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Package::clear_asneighbor() {
  if (asneighbor_ != &::google::protobuf::internal::kEmptyString) {
    asneighbor_->clear();
  }
  clear_has_asneighbor();
}
inline const ::std::string& Package::asneighbor() const {
  return *asneighbor_;
}
inline void Package::set_asneighbor(const ::std::string& value) {
  set_has_asneighbor();
  if (asneighbor_ == &::google::protobuf::internal::kEmptyString) {
    asneighbor_ = new ::std::string;
  }
  asneighbor_->assign(value);
}
inline void Package::set_asneighbor(const char* value) {
  set_has_asneighbor();
  if (asneighbor_ == &::google::protobuf::internal::kEmptyString) {
    asneighbor_ = new ::std::string;
  }
  asneighbor_->assign(value);
}
inline void Package::set_asneighbor(const char* value, size_t size) {
  set_has_asneighbor();
  if (asneighbor_ == &::google::protobuf::internal::kEmptyString) {
    asneighbor_ = new ::std::string;
  }
  asneighbor_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_asneighbor() {
  set_has_asneighbor();
  if (asneighbor_ == &::google::protobuf::internal::kEmptyString) {
    asneighbor_ = new ::std::string;
  }
  return asneighbor_;
}
inline ::std::string* Package::release_asneighbor() {
  clear_has_asneighbor();
  if (asneighbor_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = asneighbor_;
    asneighbor_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wifecode = 22;
inline bool Package::has_wifecode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Package::set_has_wifecode() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Package::clear_has_wifecode() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Package::clear_wifecode() {
  if (wifecode_ != &::google::protobuf::internal::kEmptyString) {
    wifecode_->clear();
  }
  clear_has_wifecode();
}
inline const ::std::string& Package::wifecode() const {
  return *wifecode_;
}
inline void Package::set_wifecode(const ::std::string& value) {
  set_has_wifecode();
  if (wifecode_ == &::google::protobuf::internal::kEmptyString) {
    wifecode_ = new ::std::string;
  }
  wifecode_->assign(value);
}
inline void Package::set_wifecode(const char* value) {
  set_has_wifecode();
  if (wifecode_ == &::google::protobuf::internal::kEmptyString) {
    wifecode_ = new ::std::string;
  }
  wifecode_->assign(value);
}
inline void Package::set_wifecode(const char* value, size_t size) {
  set_has_wifecode();
  if (wifecode_ == &::google::protobuf::internal::kEmptyString) {
    wifecode_ = new ::std::string;
  }
  wifecode_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::mutable_wifecode() {
  set_has_wifecode();
  if (wifecode_ == &::google::protobuf::internal::kEmptyString) {
    wifecode_ = new ::std::string;
  }
  return wifecode_;
}
inline ::std::string* Package::release_wifecode() {
  clear_has_wifecode();
  if (wifecode_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wifecode_;
    wifecode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint64 ackid = 23;
inline bool Package::has_ackid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Package::set_has_ackid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Package::clear_has_ackid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Package::clear_ackid() {
  ackid_ = GOOGLE_ULONGLONG(0);
  clear_has_ackid();
}
inline ::google::protobuf::uint64 Package::ackid() const {
  return ackid_;
}
inline void Package::set_ackid(::google::protobuf::uint64 value) {
  set_has_ackid();
  ackid_ = value;
}

// repeated uint32 tid = 24;
inline int Package::tid_size() const {
  return tid_.size();
}
inline void Package::clear_tid() {
  tid_.Clear();
}
inline ::google::protobuf::uint32 Package::tid(int index) const {
  return tid_.Get(index);
}
inline void Package::set_tid(int index, ::google::protobuf::uint32 value) {
  tid_.Set(index, value);
}
inline void Package::add_tid(::google::protobuf::uint32 value) {
  tid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Package::tid() const {
  return tid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Package::mutable_tid() {
  return &tid_;
}

// repeated string cid = 25;
inline int Package::cid_size() const {
  return cid_.size();
}
inline void Package::clear_cid() {
  cid_.Clear();
}
inline const ::std::string& Package::cid(int index) const {
  return cid_.Get(index);
}
inline ::std::string* Package::mutable_cid(int index) {
  return cid_.Mutable(index);
}
inline void Package::set_cid(int index, const ::std::string& value) {
  cid_.Mutable(index)->assign(value);
}
inline void Package::set_cid(int index, const char* value) {
  cid_.Mutable(index)->assign(value);
}
inline void Package::set_cid(int index, const char* value, size_t size) {
  cid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::add_cid() {
  return cid_.Add();
}
inline void Package::add_cid(const ::std::string& value) {
  cid_.Add()->assign(value);
}
inline void Package::add_cid(const char* value) {
  cid_.Add()->assign(value);
}
inline void Package::add_cid(const char* value, size_t size) {
  cid_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Package::cid() const {
  return cid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Package::mutable_cid() {
  return &cid_;
}

// repeated string desc = 26;
inline int Package::desc_size() const {
  return desc_.size();
}
inline void Package::clear_desc() {
  desc_.Clear();
}
inline const ::std::string& Package::desc(int index) const {
  return desc_.Get(index);
}
inline ::std::string* Package::mutable_desc(int index) {
  return desc_.Mutable(index);
}
inline void Package::set_desc(int index, const ::std::string& value) {
  desc_.Mutable(index)->assign(value);
}
inline void Package::set_desc(int index, const char* value) {
  desc_.Mutable(index)->assign(value);
}
inline void Package::set_desc(int index, const char* value, size_t size) {
  desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Package::add_desc() {
  return desc_.Add();
}
inline void Package::add_desc(const ::std::string& value) {
  desc_.Add()->assign(value);
}
inline void Package::add_desc(const char* value) {
  desc_.Add()->assign(value);
}
inline void Package::add_desc(const char* value, size_t size) {
  desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Package::desc() const {
  return desc_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Package::mutable_desc() {
  return &desc_;
}

// repeated uint32 nmoves = 27;
inline int Package::nmoves_size() const {
  return nmoves_.size();
}
inline void Package::clear_nmoves() {
  nmoves_.Clear();
}
inline ::google::protobuf::uint32 Package::nmoves(int index) const {
  return nmoves_.Get(index);
}
inline void Package::set_nmoves(int index, ::google::protobuf::uint32 value) {
  nmoves_.Set(index, value);
}
inline void Package::add_nmoves(::google::protobuf::uint32 value) {
  nmoves_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Package::nmoves() const {
  return nmoves_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Package::mutable_nmoves() {
  return &nmoves_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_meta_2eproto__INCLUDED
